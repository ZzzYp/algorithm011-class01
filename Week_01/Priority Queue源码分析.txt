//PriorityQueue内部是通过维护一个数组实现的堆数据结构来实现优先级队列的排序的。而对于堆，它是一个完全二叉树，并且父节点小于左右两个子节点。
//PriorityQueue 内部是一个小顶堆，即堆中父节点的值，小于等于子节点的值
//所以在插入元素的时候，会先判断是否需要扩容，然后将元素插入到数组中遍历到的第一个为null的位置，然后进行二叉树排序，将元素更换到合适的位置
//因为元素插入的时候，肯定是插入到了最底层的叶子节点，所以这里排序，会比较插入元素和父节点的大小，如果比父节点小，则和父节点调换位置，继续比较调换以后元素所在位置的父节点的元素本身的大小，直到大于等于父节点位置

//在poll移除元素的时候，将数组中index=0的元素移除，然后自顶向下堆化，
//如果index的左儿子小于右儿子，则左儿子和index交换，继续比较，如果index的左儿子大于右儿子，则将index和右儿子交换，继续比较，直到index交换到了最底层的叶子节点，将index所在的节点置为null


public class PriorityQueue<E> extends AbstractQueue<E> implements Serializable {
    private static final int DEFAULT_CAPACITY = 11;
    int used;
    E[] storage;
    Comparator<? super E> comparator;

    public PriorityQueue(Collection<? extends E> c) {
        this(Math.max(1, (int) (1.1 * c.size())), null);

        // Special case where we can find the comparator to use.
        //
        if (c instanceof SortedSet) {
            SortedSet<? extends E> ss = (SortedSet<? extends E>) c;
            this.comparator = (Comparator<? super E>) ss.comparator();
            // We can insert the elements directly, since they are sorted.
            int i = 0;
            for (E val : ss) {
                if (val == null)
                    throw new NullPointerException();
                storage[i++] = val;
            }
        } else if (c instanceof PriorityQueue) {
            PriorityQueue<? extends E> pq = (PriorityQueue<? extends E>) c;
            this.comparator = (Comparator<? super E>) pq.comparator();
            // We can just copy the contents.
            System.arraycopy(pq.storage, 0, storage, 0, pq.storage.length);
        }

        addAll(c);
    }
    public void clear() {
        Arrays.fill(storage, null);
        used = 0;
    }

    public Comparator<? super E> comparator() {
        return comparator;
    }

    //添加元素
    public boolean offer(E o) {
        if (o == null)
            throw new NullPointerException();
        //找到插入的位置
        int slot = findSlot(-1);
        //将o插入storage的空位置
        storage[slot] = o;
        //used+1
        ++used;
        //自下到顶做堆化
        bubbleUp(slot);

        return true;
    }

    public E peek() {
        return used == 0 ? null : storage[0];
    }

    public E poll() {
        if (used == 0)
            return null;
        //获取数组的第0个元素
        E result = storage[0];
        //移除第0个元素，然后自顶向下做堆化
        remove(0);
        return result;
    }

    public boolean remove(Object o) {
        if (o != null) {
            for (int i = 0; i < storage.length; ++i) {
                if (o.equals(storage[i])) {
                    remove(i);
                    return true;
                }
            }
        }
        return false;
    }

    public int size() {
        return used;
    }

    public boolean addAll(Collection<? extends E> c) {
        if (c == this)
            throw new IllegalArgumentException();

        int newSlot = -1;
        int save = used;
        for (E val : c) {
            if (val == null)
                throw new NullPointerException();
            newSlot = findSlot(newSlot);
            storage[newSlot] = val;
            ++used;
            bubbleUp(newSlot);
        }

        return save != used;
    }
    
    int findSlot(int start) {
        int slot;
        //如果used == storage.length ，进行扩容，slot = used
        if (used == storage.length) {
            resize();
            slot = used;
        } else {
            //遍历storage.length，找到还空着的位置，返回索引slot
            for (slot = start + 1; slot < storage.length; ++slot) {
                if (storage[slot] == null)
                    break;
            }
            // We'll always find a slot.
        }
        return slot;
    }
    //poll方法传入的index = 0
    void remove(int index) {
        // Remove the element at INDEX. We do this by finding the least
        // child and moving it into place, then iterating until we reach
        // the bottom of the tree.
        //
        while (storage[index] != null) {
            //从index = 0的节点开始，获取左子节点
            int child = 2 * index + 1;

            // See if we went off the end.
            //如果左子节点大于等于数组长度，说明已经到了最后一个元素，将该元素置为null
            if (child >= storage.length) {
                storage[index] = null;
                break;
            }

            // Find which child we want to promote. If one is not null,
            // we pick it. If both are null, it doesn't matter, we're
            // about to leave. If neither is null, pick the lesser.
            //child + 1 = index的右子节点，如果右子节点大于等于数组长度或者，右子节点=null，什么都不干
            if (child + 1 >= storage.length || storage[child + 1] == null) {
                // Nothing.
            } else if (storage[child] == null
                    || (Collections.compare(storage[child], storage[child + 1], comparator) > 0))
                //如果index的左子节点==null，或者左子节点大于右子节点，则index应该要和两个子节点中小的节点交换，将child+1 ，变为右子节点    
                ++child;
            //交换父节点index和子节点child
            storage[index] = storage[child];
            index = child;
        }
        --used;
    }

    void bubbleUp(int index) {
        // The element at INDEX was inserted into a blank spot. Now move
        // it up the tree to its natural resting place.
        //将插入的元素，放到树上合适的位置
        while (index > 0) {
            // This works regardless of whether we're at 2N+1 or 2N+2.
            //不管index是左子节点 还是右子节点，他们的父节点 = (index - 1) / 2
            int parent = (index - 1) / 2;
            //比较index的父节点和index节点的大小，如果index的父节点小于等于index节点，则说明已经插入到了合适的位置
            if (Collections.compare(storage[parent], storage[index], comparator) <= 0) {
                // Parent is the same or smaller than this element, so the
                // invariant is preserved. Note that if the new element
                // is smaller than the parent, then it is necessarily
                // smaller than the parent's other child.
                break;
            }
            //如果index的父节点大于index节点，则交换index节点和父节点，直到index的父节点小于等于index节点
            E temp = storage[index];
            storage[index] = storage[parent];
            storage[parent] = temp;

            index = parent;
        }
    }

    void resize() {
        E[] new_data = (E[]) new Object[2 * storage.length];
        System.arraycopy(storage, 0, new_data, 0, storage.length);
        storage = new_data;
    }
}